Finding ids...
Finding id_type halo_id
Filename: /home/zhh137/repos/galaxy_diver/galaxy_diver/galaxy_finder/finder.py

Line #    Mem usage    Increment   Line Contents
================================================
   470    116.9 MiB    116.9 MiB       @memory_profiler.profile
   471                                 def find_halo_id( self, radial_cut_fraction=1., type_of_halo_id='halo_id' ):
   472                                     '''Find the smallest halos our particles are inside of some radial cut of (we define this as the halo ID).
   473                                     In the case of using MT halo ID, we actually find the most massive our particles are inside some radial cut of.
   474                             
   475                                     Args:
   476                                         radial_cut_fraction (float): A particle is in a halo if it's in radial_cut_fraction*length_scale from the center.
   477                                         type_of_halo_id (str): If 'halo_id' then this is the halo_id at a given snapshot.
   478                                                                                       If 'mt_halo_id' then this is the halo_id according to the merger tree.
   479                             
   480                                     Returns:
   481                                         halo_id (np.array of ints): Shape ( n_particles, ).
   482                                             The ID of the least massive substructure the particle's part of.
   483                                             In the case of using the 'mt_halo_id', this is the ID of the most massive merger tree halo the particle's part of.
   484                                             If it's -2, then that particle is not part of any halo, within radial_cut_fraction*length_scale .
   485                                     '''
   486                             
   487                                     # Choose parameters of the rest of the function based on what type of halo ID we're using
   488    116.9 MiB      0.0 MiB           if type_of_halo_id == 'halo_id':
   489                             
   490                                         # Get the virial masses. It's okay to leave in comoving, since we're just finding the minimum
   491    116.9 MiB      0.0 MiB               m_vir = self.ahf_reader.ahf_halos['Mvir']
   492                             
   493                                         # Handle the case where we have an empty ahf_halos, because there are no halos at that redshift.
   494                                         # In this case, the halo ID will be -2 throughout
   495    116.9 MiB      0.0 MiB               if m_vir.size == 0:
   496                                             halo_id = np.empty( self.n_particles )
   497                                             halo_id.fill( -2. )
   498                                             return halo_id
   499                             
   500                                         # Functions that change.
   501    116.9 MiB      0.0 MiB               find_containing_halos_fn = self.find_containing_halos
   502    116.9 MiB      0.0 MiB               arg_extremum_fn = np.argmin
   503    116.9 MiB      0.0 MiB               extremum_fn = np.min
   504                             
   505                                     elif type_of_halo_id == 'mt_halo_id':
   506                             
   507                                         # Functions that change.
   508                                         find_containing_halos_fn = self.find_mt_containing_halos
   509                                         arg_extremum_fn = np.argmax
   510                                         extremum_fn = np.max
   511                             
   512                                         # Get the virial masses. It's okay to leave in comoving, since we're just finding the maximum
   513                                         m_vir = self.ahf_reader.get_mtree_halo_quantity( quantity='Mvir', indice=self.snum,
   514                                                                                                                                           index=self.mtree_halos_index, tag=self.halo_file_tag )
   515                             
   516                                     else:
   517                                         raise Exception( "Unrecognized type_of_halo_id" )
   518                             
   519                                     # Get the cut
   520    116.9 MiB      0.0 MiB           part_of_halo = find_containing_halos_fn( radial_cut_fraction=radial_cut_fraction )
   521                             
   522                                     # Mask the data
   523    116.9 MiB      0.0 MiB           tiled_m_vir = np.tile( m_vir, ( self.n_particles, 1 ) )
   524    116.9 MiB      0.0 MiB           tiled_m_vir_ma = np.ma.masked_array( tiled_m_vir, mask=np.invert( part_of_halo ), )
   525                             
   526                                     # Take the extremum of the masked data
   527    116.9 MiB      0.0 MiB           if type_of_halo_id == 'halo_id':
   528    116.9 MiB      0.0 MiB               halo_id = arg_extremum_fn( tiled_m_vir_ma, axis=1 )
   529                                     elif type_of_halo_id == 'mt_halo_id':
   530                                         halo_ind = arg_extremum_fn( tiled_m_vir_ma, axis=1 )
   531                                         halo_ids = np.array( sorted( self.ahf_reader.mtree_halos.keys() ) )
   532                                         halo_id = halo_ids[halo_ind]
   533                             
   534                                     # Account for the fact that the argmin defaults to 0 when there's nothing there
   535    116.9 MiB      0.0 MiB           mask = extremum_fn( tiled_m_vir_ma, axis=1 ).mask
   536    116.9 MiB      0.0 MiB           halo_id = np.ma.filled( np.ma.masked_array(halo_id, mask=mask), fill_value=-2 )
   537                             
   538    116.9 MiB      0.0 MiB           return halo_id


Finding id_type host_halo_id
Filename: /home/zhh137/repos/galaxy_diver/galaxy_diver/galaxy_finder/finder.py

Line #    Mem usage    Increment   Line Contents
================================================
   470    116.9 MiB    116.9 MiB       @memory_profiler.profile
   471                                 def find_halo_id( self, radial_cut_fraction=1., type_of_halo_id='halo_id' ):
   472                                     '''Find the smallest halos our particles are inside of some radial cut of (we define this as the halo ID).
   473                                     In the case of using MT halo ID, we actually find the most massive our particles are inside some radial cut of.
   474                             
   475                                     Args:
   476                                         radial_cut_fraction (float): A particle is in a halo if it's in radial_cut_fraction*length_scale from the center.
   477                                         type_of_halo_id (str): If 'halo_id' then this is the halo_id at a given snapshot.
   478                                                                                       If 'mt_halo_id' then this is the halo_id according to the merger tree.
   479                             
   480                                     Returns:
   481                                         halo_id (np.array of ints): Shape ( n_particles, ).
   482                                             The ID of the least massive substructure the particle's part of.
   483                                             In the case of using the 'mt_halo_id', this is the ID of the most massive merger tree halo the particle's part of.
   484                                             If it's -2, then that particle is not part of any halo, within radial_cut_fraction*length_scale .
   485                                     '''
   486                             
   487                                     # Choose parameters of the rest of the function based on what type of halo ID we're using
   488    116.9 MiB      0.0 MiB           if type_of_halo_id == 'halo_id':
   489                             
   490                                         # Get the virial masses. It's okay to leave in comoving, since we're just finding the minimum
   491    116.9 MiB      0.0 MiB               m_vir = self.ahf_reader.ahf_halos['Mvir']
   492                             
   493                                         # Handle the case where we have an empty ahf_halos, because there are no halos at that redshift.
   494                                         # In this case, the halo ID will be -2 throughout
   495    116.9 MiB      0.0 MiB               if m_vir.size == 0:
   496                                             halo_id = np.empty( self.n_particles )
   497                                             halo_id.fill( -2. )
   498                                             return halo_id
   499                             
   500                                         # Functions that change.
   501    116.9 MiB      0.0 MiB               find_containing_halos_fn = self.find_containing_halos
   502    116.9 MiB      0.0 MiB               arg_extremum_fn = np.argmin
   503    116.9 MiB      0.0 MiB               extremum_fn = np.min
   504                             
   505                                     elif type_of_halo_id == 'mt_halo_id':
   506                             
   507                                         # Functions that change.
   508                                         find_containing_halos_fn = self.find_mt_containing_halos
   509                                         arg_extremum_fn = np.argmax
   510                                         extremum_fn = np.max
   511                             
   512                                         # Get the virial masses. It's okay to leave in comoving, since we're just finding the maximum
   513                                         m_vir = self.ahf_reader.get_mtree_halo_quantity( quantity='Mvir', indice=self.snum,
   514                                                                                                                                           index=self.mtree_halos_index, tag=self.halo_file_tag )
   515                             
   516                                     else:
   517                                         raise Exception( "Unrecognized type_of_halo_id" )
   518                             
   519                                     # Get the cut
   520    116.9 MiB      0.0 MiB           part_of_halo = find_containing_halos_fn( radial_cut_fraction=radial_cut_fraction )
   521                             
   522                                     # Mask the data
   523    116.9 MiB      0.0 MiB           tiled_m_vir = np.tile( m_vir, ( self.n_particles, 1 ) )
   524    116.9 MiB      0.0 MiB           tiled_m_vir_ma = np.ma.masked_array( tiled_m_vir, mask=np.invert( part_of_halo ), )
   525                             
   526                                     # Take the extremum of the masked data
   527    116.9 MiB      0.0 MiB           if type_of_halo_id == 'halo_id':
   528    116.9 MiB      0.0 MiB               halo_id = arg_extremum_fn( tiled_m_vir_ma, axis=1 )
   529                                     elif type_of_halo_id == 'mt_halo_id':
   530                                         halo_ind = arg_extremum_fn( tiled_m_vir_ma, axis=1 )
   531                                         halo_ids = np.array( sorted( self.ahf_reader.mtree_halos.keys() ) )
   532                                         halo_id = halo_ids[halo_ind]
   533                             
   534                                     # Account for the fact that the argmin defaults to 0 when there's nothing there
   535    116.9 MiB      0.0 MiB           mask = extremum_fn( tiled_m_vir_ma, axis=1 ).mask
   536    116.9 MiB      0.0 MiB           halo_id = np.ma.filled( np.ma.masked_array(halo_id, mask=mask), fill_value=-2 )
   537                             
   538    116.9 MiB      0.0 MiB           return halo_id


Finding id_type gal_id
Filename: /home/zhh137/repos/galaxy_diver/galaxy_diver/galaxy_finder/finder.py

Line #    Mem usage    Increment   Line Contents
================================================
   470    116.9 MiB    116.9 MiB       @memory_profiler.profile
   471                                 def find_halo_id( self, radial_cut_fraction=1., type_of_halo_id='halo_id' ):
   472                                     '''Find the smallest halos our particles are inside of some radial cut of (we define this as the halo ID).
   473                                     In the case of using MT halo ID, we actually find the most massive our particles are inside some radial cut of.
   474                             
   475                                     Args:
   476                                         radial_cut_fraction (float): A particle is in a halo if it's in radial_cut_fraction*length_scale from the center.
   477                                         type_of_halo_id (str): If 'halo_id' then this is the halo_id at a given snapshot.
   478                                                                                       If 'mt_halo_id' then this is the halo_id according to the merger tree.
   479                             
   480                                     Returns:
   481                                         halo_id (np.array of ints): Shape ( n_particles, ).
   482                                             The ID of the least massive substructure the particle's part of.
   483                                             In the case of using the 'mt_halo_id', this is the ID of the most massive merger tree halo the particle's part of.
   484                                             If it's -2, then that particle is not part of any halo, within radial_cut_fraction*length_scale .
   485                                     '''
   486                             
   487                                     # Choose parameters of the rest of the function based on what type of halo ID we're using
   488    116.9 MiB      0.0 MiB           if type_of_halo_id == 'halo_id':
   489                             
   490                                         # Get the virial masses. It's okay to leave in comoving, since we're just finding the minimum
   491    116.9 MiB      0.0 MiB               m_vir = self.ahf_reader.ahf_halos['Mvir']
   492                             
   493                                         # Handle the case where we have an empty ahf_halos, because there are no halos at that redshift.
   494                                         # In this case, the halo ID will be -2 throughout
   495    116.9 MiB      0.0 MiB               if m_vir.size == 0:
   496                                             halo_id = np.empty( self.n_particles )
   497                                             halo_id.fill( -2. )
   498                                             return halo_id
   499                             
   500                                         # Functions that change.
   501    116.9 MiB      0.0 MiB               find_containing_halos_fn = self.find_containing_halos
   502    116.9 MiB      0.0 MiB               arg_extremum_fn = np.argmin
   503    116.9 MiB      0.0 MiB               extremum_fn = np.min
   504                             
   505                                     elif type_of_halo_id == 'mt_halo_id':
   506                             
   507                                         # Functions that change.
   508                                         find_containing_halos_fn = self.find_mt_containing_halos
   509                                         arg_extremum_fn = np.argmax
   510                                         extremum_fn = np.max
   511                             
   512                                         # Get the virial masses. It's okay to leave in comoving, since we're just finding the maximum
   513                                         m_vir = self.ahf_reader.get_mtree_halo_quantity( quantity='Mvir', indice=self.snum,
   514                                                                                                                                           index=self.mtree_halos_index, tag=self.halo_file_tag )
   515                             
   516                                     else:
   517                                         raise Exception( "Unrecognized type_of_halo_id" )
   518                             
   519                                     # Get the cut
   520    116.9 MiB      0.0 MiB           part_of_halo = find_containing_halos_fn( radial_cut_fraction=radial_cut_fraction )
   521                             
   522                                     # Mask the data
   523    116.9 MiB      0.0 MiB           tiled_m_vir = np.tile( m_vir, ( self.n_particles, 1 ) )
   524    116.9 MiB      0.0 MiB           tiled_m_vir_ma = np.ma.masked_array( tiled_m_vir, mask=np.invert( part_of_halo ), )
   525                             
   526                                     # Take the extremum of the masked data
   527    116.9 MiB      0.0 MiB           if type_of_halo_id == 'halo_id':
   528    116.9 MiB      0.0 MiB               halo_id = arg_extremum_fn( tiled_m_vir_ma, axis=1 )
   529                                     elif type_of_halo_id == 'mt_halo_id':
   530                                         halo_ind = arg_extremum_fn( tiled_m_vir_ma, axis=1 )
   531                                         halo_ids = np.array( sorted( self.ahf_reader.mtree_halos.keys() ) )
   532                                         halo_id = halo_ids[halo_ind]
   533                             
   534                                     # Account for the fact that the argmin defaults to 0 when there's nothing there
   535    116.9 MiB      0.0 MiB           mask = extremum_fn( tiled_m_vir_ma, axis=1 ).mask
   536    116.9 MiB      0.0 MiB           halo_id = np.ma.filled( np.ma.masked_array(halo_id, mask=mask), fill_value=-2 )
   537                             
   538    116.9 MiB      0.0 MiB           return halo_id


Finding id_type host_gal_id
Filename: /home/zhh137/repos/galaxy_diver/galaxy_diver/galaxy_finder/finder.py

Line #    Mem usage    Increment   Line Contents
================================================
   470    116.9 MiB    116.9 MiB       @memory_profiler.profile
   471                                 def find_halo_id( self, radial_cut_fraction=1., type_of_halo_id='halo_id' ):
   472                                     '''Find the smallest halos our particles are inside of some radial cut of (we define this as the halo ID).
   473                                     In the case of using MT halo ID, we actually find the most massive our particles are inside some radial cut of.
   474                             
   475                                     Args:
   476                                         radial_cut_fraction (float): A particle is in a halo if it's in radial_cut_fraction*length_scale from the center.
   477                                         type_of_halo_id (str): If 'halo_id' then this is the halo_id at a given snapshot.
   478                                                                                       If 'mt_halo_id' then this is the halo_id according to the merger tree.
   479                             
   480                                     Returns:
   481                                         halo_id (np.array of ints): Shape ( n_particles, ).
   482                                             The ID of the least massive substructure the particle's part of.
   483                                             In the case of using the 'mt_halo_id', this is the ID of the most massive merger tree halo the particle's part of.
   484                                             If it's -2, then that particle is not part of any halo, within radial_cut_fraction*length_scale .
   485                                     '''
   486                             
   487                                     # Choose parameters of the rest of the function based on what type of halo ID we're using
   488    116.9 MiB      0.0 MiB           if type_of_halo_id == 'halo_id':
   489                             
   490                                         # Get the virial masses. It's okay to leave in comoving, since we're just finding the minimum
   491    116.9 MiB      0.0 MiB               m_vir = self.ahf_reader.ahf_halos['Mvir']
   492                             
   493                                         # Handle the case where we have an empty ahf_halos, because there are no halos at that redshift.
   494                                         # In this case, the halo ID will be -2 throughout
   495    116.9 MiB      0.0 MiB               if m_vir.size == 0:
   496                                             halo_id = np.empty( self.n_particles )
   497                                             halo_id.fill( -2. )
   498                                             return halo_id
   499                             
   500                                         # Functions that change.
   501    116.9 MiB      0.0 MiB               find_containing_halos_fn = self.find_containing_halos
   502    116.9 MiB      0.0 MiB               arg_extremum_fn = np.argmin
   503    116.9 MiB      0.0 MiB               extremum_fn = np.min
   504                             
   505                                     elif type_of_halo_id == 'mt_halo_id':
   506                             
   507                                         # Functions that change.
   508                                         find_containing_halos_fn = self.find_mt_containing_halos
   509                                         arg_extremum_fn = np.argmax
   510                                         extremum_fn = np.max
   511                             
   512                                         # Get the virial masses. It's okay to leave in comoving, since we're just finding the maximum
   513                                         m_vir = self.ahf_reader.get_mtree_halo_quantity( quantity='Mvir', indice=self.snum,
   514                                                                                                                                           index=self.mtree_halos_index, tag=self.halo_file_tag )
   515                             
   516                                     else:
   517                                         raise Exception( "Unrecognized type_of_halo_id" )
   518                             
   519                                     # Get the cut
   520    116.9 MiB      0.0 MiB           part_of_halo = find_containing_halos_fn( radial_cut_fraction=radial_cut_fraction )
   521                             
   522                                     # Mask the data
   523    116.9 MiB      0.0 MiB           tiled_m_vir = np.tile( m_vir, ( self.n_particles, 1 ) )
   524    116.9 MiB      0.0 MiB           tiled_m_vir_ma = np.ma.masked_array( tiled_m_vir, mask=np.invert( part_of_halo ), )
   525                             
   526                                     # Take the extremum of the masked data
   527    116.9 MiB      0.0 MiB           if type_of_halo_id == 'halo_id':
   528    116.9 MiB      0.0 MiB               halo_id = arg_extremum_fn( tiled_m_vir_ma, axis=1 )
   529                                     elif type_of_halo_id == 'mt_halo_id':
   530                                         halo_ind = arg_extremum_fn( tiled_m_vir_ma, axis=1 )
   531                                         halo_ids = np.array( sorted( self.ahf_reader.mtree_halos.keys() ) )
   532                                         halo_id = halo_ids[halo_ind]
   533                             
   534                                     # Account for the fact that the argmin defaults to 0 when there's nothing there
   535    116.9 MiB      0.0 MiB           mask = extremum_fn( tiled_m_vir_ma, axis=1 ).mask
   536    116.9 MiB      0.0 MiB           halo_id = np.ma.filled( np.ma.masked_array(halo_id, mask=mask), fill_value=-2 )
   537                             
   538    116.9 MiB      0.0 MiB           return halo_id


Finding id_type mt_halo_id
Filename: /home/zhh137/repos/galaxy_diver/galaxy_diver/galaxy_finder/finder.py

Line #    Mem usage    Increment   Line Contents
================================================
   470    116.9 MiB    116.9 MiB       @memory_profiler.profile
   471                                 def find_halo_id( self, radial_cut_fraction=1., type_of_halo_id='halo_id' ):
   472                                     '''Find the smallest halos our particles are inside of some radial cut of (we define this as the halo ID).
   473                                     In the case of using MT halo ID, we actually find the most massive our particles are inside some radial cut of.
   474                             
   475                                     Args:
   476                                         radial_cut_fraction (float): A particle is in a halo if it's in radial_cut_fraction*length_scale from the center.
   477                                         type_of_halo_id (str): If 'halo_id' then this is the halo_id at a given snapshot.
   478                                                                                       If 'mt_halo_id' then this is the halo_id according to the merger tree.
   479                             
   480                                     Returns:
   481                                         halo_id (np.array of ints): Shape ( n_particles, ).
   482                                             The ID of the least massive substructure the particle's part of.
   483                                             In the case of using the 'mt_halo_id', this is the ID of the most massive merger tree halo the particle's part of.
   484                                             If it's -2, then that particle is not part of any halo, within radial_cut_fraction*length_scale .
   485                                     '''
   486                             
   487                                     # Choose parameters of the rest of the function based on what type of halo ID we're using
   488    116.9 MiB      0.0 MiB           if type_of_halo_id == 'halo_id':
   489                             
   490                                         # Get the virial masses. It's okay to leave in comoving, since we're just finding the minimum
   491                                         m_vir = self.ahf_reader.ahf_halos['Mvir']
   492                             
   493                                         # Handle the case where we have an empty ahf_halos, because there are no halos at that redshift.
   494                                         # In this case, the halo ID will be -2 throughout
   495                                         if m_vir.size == 0:
   496                                             halo_id = np.empty( self.n_particles )
   497                                             halo_id.fill( -2. )
   498                                             return halo_id
   499                             
   500                                         # Functions that change.
   501                                         find_containing_halos_fn = self.find_containing_halos
   502                                         arg_extremum_fn = np.argmin
   503                                         extremum_fn = np.min
   504                             
   505    116.9 MiB      0.0 MiB           elif type_of_halo_id == 'mt_halo_id':
   506                             
   507                                         # Functions that change.
   508    116.9 MiB      0.0 MiB               find_containing_halos_fn = self.find_mt_containing_halos
   509    116.9 MiB      0.0 MiB               arg_extremum_fn = np.argmax
   510    116.9 MiB      0.0 MiB               extremum_fn = np.max
   511                             
   512                                         # Get the virial masses. It's okay to leave in comoving, since we're just finding the maximum
   513    116.9 MiB      0.0 MiB               m_vir = self.ahf_reader.get_mtree_halo_quantity( quantity='Mvir', indice=self.snum,
   514    116.9 MiB      0.0 MiB                                                                                                                 index=self.mtree_halos_index, tag=self.halo_file_tag )
   515                             
   516                                     else:
   517                                         raise Exception( "Unrecognized type_of_halo_id" )
   518                             
   519                                     # Get the cut
   520    116.9 MiB      0.0 MiB           part_of_halo = find_containing_halos_fn( radial_cut_fraction=radial_cut_fraction )
   521                             
   522                                     # Mask the data
   523    116.9 MiB      0.0 MiB           tiled_m_vir = np.tile( m_vir, ( self.n_particles, 1 ) )
   524    116.9 MiB      0.0 MiB           tiled_m_vir_ma = np.ma.masked_array( tiled_m_vir, mask=np.invert( part_of_halo ), )
   525                             
   526                                     # Take the extremum of the masked data
   527    116.9 MiB      0.0 MiB           if type_of_halo_id == 'halo_id':
   528                                         halo_id = arg_extremum_fn( tiled_m_vir_ma, axis=1 )
   529    116.9 MiB      0.0 MiB           elif type_of_halo_id == 'mt_halo_id':
   530    116.9 MiB      0.0 MiB               halo_ind = arg_extremum_fn( tiled_m_vir_ma, axis=1 )
   531    116.9 MiB      0.0 MiB               halo_ids = np.array( sorted( self.ahf_reader.mtree_halos.keys() ) )
   532    116.9 MiB      0.0 MiB               halo_id = halo_ids[halo_ind]
   533                             
   534                                     # Account for the fact that the argmin defaults to 0 when there's nothing there
   535    116.9 MiB      0.0 MiB           mask = extremum_fn( tiled_m_vir_ma, axis=1 ).mask
   536    116.9 MiB      0.0 MiB           halo_id = np.ma.filled( np.ma.masked_array(halo_id, mask=mask), fill_value=-2 )
   537                             
   538    116.9 MiB      0.0 MiB           return halo_id


Finding id_type mt_gal_id
Filename: /home/zhh137/repos/galaxy_diver/galaxy_diver/galaxy_finder/finder.py

Line #    Mem usage    Increment   Line Contents
================================================
   470    116.9 MiB    116.9 MiB       @memory_profiler.profile
   471                                 def find_halo_id( self, radial_cut_fraction=1., type_of_halo_id='halo_id' ):
   472                                     '''Find the smallest halos our particles are inside of some radial cut of (we define this as the halo ID).
   473                                     In the case of using MT halo ID, we actually find the most massive our particles are inside some radial cut of.
   474                             
   475                                     Args:
   476                                         radial_cut_fraction (float): A particle is in a halo if it's in radial_cut_fraction*length_scale from the center.
   477                                         type_of_halo_id (str): If 'halo_id' then this is the halo_id at a given snapshot.
   478                                                                                       If 'mt_halo_id' then this is the halo_id according to the merger tree.
   479                             
   480                                     Returns:
   481                                         halo_id (np.array of ints): Shape ( n_particles, ).
   482                                             The ID of the least massive substructure the particle's part of.
   483                                             In the case of using the 'mt_halo_id', this is the ID of the most massive merger tree halo the particle's part of.
   484                                             If it's -2, then that particle is not part of any halo, within radial_cut_fraction*length_scale .
   485                                     '''
   486                             
   487                                     # Choose parameters of the rest of the function based on what type of halo ID we're using
   488    116.9 MiB      0.0 MiB           if type_of_halo_id == 'halo_id':
   489                             
   490                                         # Get the virial masses. It's okay to leave in comoving, since we're just finding the minimum
   491                                         m_vir = self.ahf_reader.ahf_halos['Mvir']
   492                             
   493                                         # Handle the case where we have an empty ahf_halos, because there are no halos at that redshift.
   494                                         # In this case, the halo ID will be -2 throughout
   495                                         if m_vir.size == 0:
   496                                             halo_id = np.empty( self.n_particles )
   497                                             halo_id.fill( -2. )
   498                                             return halo_id
   499                             
   500                                         # Functions that change.
   501                                         find_containing_halos_fn = self.find_containing_halos
   502                                         arg_extremum_fn = np.argmin
   503                                         extremum_fn = np.min
   504                             
   505    116.9 MiB      0.0 MiB           elif type_of_halo_id == 'mt_halo_id':
   506                             
   507                                         # Functions that change.
   508    116.9 MiB      0.0 MiB               find_containing_halos_fn = self.find_mt_containing_halos
   509    116.9 MiB      0.0 MiB               arg_extremum_fn = np.argmax
   510    116.9 MiB      0.0 MiB               extremum_fn = np.max
   511                             
   512                                         # Get the virial masses. It's okay to leave in comoving, since we're just finding the maximum
   513    116.9 MiB      0.0 MiB               m_vir = self.ahf_reader.get_mtree_halo_quantity( quantity='Mvir', indice=self.snum,
   514    116.9 MiB      0.0 MiB                                                                                                                 index=self.mtree_halos_index, tag=self.halo_file_tag )
   515                             
   516                                     else:
   517                                         raise Exception( "Unrecognized type_of_halo_id" )
   518                             
   519                                     # Get the cut
   520    116.9 MiB      0.0 MiB           part_of_halo = find_containing_halos_fn( radial_cut_fraction=radial_cut_fraction )
   521                             
   522                                     # Mask the data
   523    116.9 MiB      0.0 MiB           tiled_m_vir = np.tile( m_vir, ( self.n_particles, 1 ) )
   524    116.9 MiB      0.0 MiB           tiled_m_vir_ma = np.ma.masked_array( tiled_m_vir, mask=np.invert( part_of_halo ), )
   525                             
   526                                     # Take the extremum of the masked data
   527    116.9 MiB      0.0 MiB           if type_of_halo_id == 'halo_id':
   528                                         halo_id = arg_extremum_fn( tiled_m_vir_ma, axis=1 )
   529    116.9 MiB      0.0 MiB           elif type_of_halo_id == 'mt_halo_id':
   530    116.9 MiB      0.0 MiB               halo_ind = arg_extremum_fn( tiled_m_vir_ma, axis=1 )
   531    116.9 MiB      0.0 MiB               halo_ids = np.array( sorted( self.ahf_reader.mtree_halos.keys() ) )
   532    116.9 MiB      0.0 MiB               halo_id = halo_ids[halo_ind]
   533                             
   534                                     # Account for the fact that the argmin defaults to 0 when there's nothing there
   535    116.9 MiB      0.0 MiB           mask = extremum_fn( tiled_m_vir_ma, axis=1 ).mask
   536    116.9 MiB      0.0 MiB           halo_id = np.ma.filled( np.ma.masked_array(halo_id, mask=mask), fill_value=-2 )
   537                             
   538    116.9 MiB      0.0 MiB           return halo_id


Finding id_type d_gal
Filename: /home/zhh137/repos/galaxy_diver/galaxy_diver/galaxy_finder/finder.py

Line #    Mem usage    Increment   Line Contents
================================================
   342    116.9 MiB    116.9 MiB       @memory_profiler.profile
   343                                 def find_d_gal( self ):
   344                                     '''Find the distance to the center of the closest halo that contains a
   345                                     galaxy.
   346                             
   347                                     Returns:
   348                                         d_gal (np.ndarray) : For particle i, d_gal[i] is the distance in
   349                                         pkpc to the center of the nearest galaxy.
   350                                     '''
   351                             
   352                                     # Handle when no halos exist.
   353    116.9 MiB      0.0 MiB           if self.ahf_reader.ahf_halos.size == 0:
   354                                         return -2. * np.ones( (self.n_particles,) )
   355                             
   356    116.9 MiB      0.0 MiB           return np.min( self.dist_to_all_valid_halos, axis=1 )


Finding id_type d_other_gal_scaled
Filename: /home/zhh137/repos/galaxy_diver/galaxy_diver/galaxy_finder/finder.py

Line #    Mem usage    Increment   Line Contents
================================================
   360    116.9 MiB    116.9 MiB       @memory_profiler.profile
   361                                 def find_d_other_gal( self, scaled=False ):
   362                                     '''Find the distance to the center of the closest halo that contains a
   363                                     galaxy, other than the main galaxy.
   364                             
   365                                     Args:
   366                                         scaled (bool) : If True, scale d_other_gal by length_scale
   367                             
   368                                     Returns:
   369                                         d_other_gal (np.ndarray) :
   370                                             For particle i, d_other_gal[i] is the distance in pkpc to the
   371                                             center of the nearest galaxy, besides the main galaxy.
   372                                     '''
   373                             
   374                                     # Handle when no halos exist.
   375    116.9 MiB      0.0 MiB           if self.ahf_reader.ahf_halos.size == 0:
   376                                         return -2. * np.ones( (self.n_particles,) )
   377                             
   378                                     # Handle when all the halos aren't massive enough
   379    116.9 MiB      0.0 MiB           if self.valid_halo_inds.size == 0:
   380                                         return -2. * np.ones( (self.n_particles,) )
   381                             
   382    116.9 MiB      0.0 MiB           self.ahf_reader.get_mtree_halos(
   383    116.9 MiB      0.0 MiB               self.mtree_halos_index, self.halo_file_tag )
   384                             
   385    116.9 MiB      0.0 MiB           mtree_halo = self.ahf_reader.mtree_halos[ self.main_mt_halo_id ]
   386                             
   387    116.9 MiB      0.0 MiB           if self.snum < mtree_halo.index.min():
   388                                         # This mimics what would happen if ind_main_gal wasn't
   389                                         # in self.valid_halo_inds
   390                                         ind_main_gal_in_valid_inds = np.array( [] )
   391                                     else:
   392                                         # The indice for the main galaxy is the same as the AHF_halos
   393                                         # ID for it.
   394    116.9 MiB      0.0 MiB               ind_main_gal = mtree_halo['ID'][ self.snum ]
   395                             
   396                                         valid_halo_ind_is_main_gal_ind = \
   397    116.9 MiB      0.0 MiB                   self.valid_halo_inds == ind_main_gal
   398                                         ind_main_gal_in_valid_inds = \
   399    116.9 MiB      0.0 MiB                   np.where( valid_halo_ind_is_main_gal_ind )[0]
   400                             
   401    116.9 MiB      0.0 MiB           if ind_main_gal_in_valid_inds.size == 0:
   402                                         dist_to_all_valid_other_gals = self.dist_to_all_valid_halos
   403                                         valid_halo_inds_sats = self.valid_halo_inds
   404                             
   405    116.9 MiB      0.0 MiB           elif ind_main_gal_in_valid_inds.size == 1:
   406    116.9 MiB      0.0 MiB               dist_to_all_valid_other_gals = np.delete(
   407    116.9 MiB      0.0 MiB                   self.dist_to_all_valid_halos,
   408    116.9 MiB      0.0 MiB                   ind_main_gal_in_valid_inds[0],
   409    116.9 MiB      0.0 MiB                   axis=1
   410                                         )
   411                                         valid_halo_inds_sats = \
   412    116.9 MiB      0.0 MiB                   np.delete( self.valid_halo_inds, ind_main_gal_in_valid_inds[0] )
   413                             
   414                                     else:
   415                                         raise Exception(
   416                                             "ind_main_gal_in_valid_inds too big, is size {}".format(
   417                                                 valid_ind_main_gal.size )
   418                                         )
   419                             
   420    116.9 MiB      0.0 MiB           if not scaled:
   421                                         return np.min( dist_to_all_valid_other_gals, axis=1 )
   422                             
   423    116.9 MiB      0.0 MiB           inds_sat = np.argmin( dist_to_all_valid_other_gals, axis=1 )
   424                             
   425                                     # Now scale
   426    116.9 MiB      0.0 MiB           length_scale_sats = self.ahf_halos_length_scale_pkpc[ valid_halo_inds_sats ]
   427                             
   428    116.9 MiB      0.0 MiB           dist_to_all_valid_other_gals_scaled = dist_to_all_valid_other_gals/length_scale_sats[np.newaxis,:]
   429                             
   430    116.9 MiB      0.0 MiB           d_other_gal_scaled = dist_to_all_valid_other_gals_scaled[ np.arange( self.n_particles ), inds_sat ]
   431                             
   432    116.9 MiB      0.0 MiB           return d_other_gal_scaled


Snapshot 500 | redshift   0.169 | done in 1.12 seconds
PID 13880 finishing, PPID 13803.
