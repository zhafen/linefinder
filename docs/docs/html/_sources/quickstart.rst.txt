Quickstart
==========

This page is to help you to start tracking particles.

If you have access to the FIRE simulation data you can follow along
step-by-step to make sure everything is working as expected.

Setup
-----

The Linefinder Config File
~~~~~~~~~~~~~~~~~~~~~~~~~~
TBD.

The Job Script
~~~~~~~~~~~~~~~~~~~~~
TBD.


Running Linefinder
------------------

On an Interactive Node
~~~~~~~~~~~~~~~~~~~~~~

The simplest way to run Linefinder is on an interactive node. To start a single core working on your Linefinder job, simply do e.g. ::

    $ jug execute linefinder_example.py &

If you're using Linefinder to do particle tracking on many snapshots of a high resolution simulation chances are this will take longer than is desirable.
Fortunately Linefinder is parallelized using `Jug <https://jug.readthedocs.io/en/latest/>`_ (see also :ref:`a-note-about-jug`).
To start more cores running Linefinder just reenter the line above, or better yet do a loop in bash, e.g. ::

    $ for i in $(seq 5) ; do jug execute linefinder_example.py & done

Each core will then be responsible for one snapshot at a time.
Deciding how many cores to use (in the above example I use 5) is almost always a function of the memory availble to a node because each core needs a snapshot worth of memory.
If you run out of memory and your job crashes you will need to restart linefinder (see :ref:`restarting-a-job`).

As a Batch Job
~~~~~~~~~~~~~~

Linefinder can also easily be run as a batch job.
This is important for when you want to use more than a single node to speed up a particle tracking calculation.
To submit as a batch job simply modify `submit_linefinder.sh <https://github.com/zhafen/linefinder/blob/master/linefinder/job_scripts/submit_linefinder.sh>`_ according to your cluster and preferences, then submit with e.g. ::

    $ sbatch submit_linefinder.sh linefinder_example.py 6

In this example the above command will run ``linefinder_example.py`` on a single node using 6 cores.
Reentering the above command will do the same on another node.

.. NOTE::
   Resubmitting the same job *does not* cause conflicts, but just speeds up the job by throwing more nodes at it.

The most computationally intensive parts of particle tracking are embarrassingly parallel, so please feel free to use a number of nodes to greatly speed up the work.
Particle tracking isn't *that* expensive, so about ten nodes is probably sufficient, and will complete most runs in about 10 minutes.

.. _restarting-a-job:

Restarting a Job
~~~~~~~~~~~~~~~~

Sometimes jobs crash.
Maybe too many cores were used per node and you ran out of memory, maybe you ran out of time, etc.
When this happens you'll want to restart the Linefinder run.
This is simple and involves two steps:

1. Deleting all the jugdata in your output directory (e.g. ``rm -r path/to/output/*jugdata``).
2. Turning off the parts of your job that have already completed.

Jug communicates through the filesystem (see :ref:`a-note-about-jug`), so (1) is necessary to get a fresh start.
(2) is necessary to prevent redoing work (and also crashing when Linefinder tries to save a file where one already exists), and is as simple as adding the argument e.g. ``run_tracking = False,`` in ``linefinder.run_linefinder_jug()`` in your job script.

.. _a-note-about-jug:

A Note About Jug
~~~~~~~~~~~~~~~~

Linefinder is parallelized using `Jug <https://jug.readthedocs.io/en/latest/>`_ (see :ref:`a-note-about-jug`).
The most noteable thing about Jug is that it communicates between processes using the file system.
The main benefit to this is easy communication between multiple nodes, even allowing the user to add more nodes as they become available/are needed.
All the communications for Jug are kept in `jugdata` folders, tagged using the same tag used for a job, e.g. `m12i_example.jugdata`.
To learn more, see `the official docs <https://jug.readthedocs.io/en/latest/>`_

Advanced Job Submission
~~~~~~~~~~~~~~~~~~~~~~~

In many cases you may want to run Linefinder not just on a single simulation, but on a number of simulations.
Further, you might want to systematically vary the parameters used with Linefinder.
Linefinder offers options to do this automatically with minimal monitoring by the user.
However these options require additional explanation, and I've postponed creating a simplified example until there's actual demand for them.
If you're actually interested, `contact me <zachary.h.hafen@gmail.com>`_, and I'd be happy to put together an example.

.. _a-note-about-jug:
